name: kitesurf-zero-touch-pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}
  schedule:
    - cron: "0 14 * * 1-5"   # 07:00 America/Los_Angeles on weekdays

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      PYTHONUNBUFFERED: "1"
      PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
      PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}
      GOOGLE_CLIENT_SECRET_JSON: ${{ secrets.GOOGLE_CLIENT_SECRET_JSON }}
      YOUTUBE_TOKENS_JSON: ${{ secrets.YOUTUBE_TOKENS_JSON }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        id: setup_py
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: System deps (ffmpeg + fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Install deps (robust)
        run: |
          set -eux
          python -c "import sys; print('Python:', sys.version); print('Exe:', sys.executable)"
          python -m pip install --upgrade pip setuptools wheel
          # Project requirements (optional)
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt || true; fi
          # Ensure runtime deps no matter what requirements.txt has
          python -m pip install --upgrade moviepy imageio imageio-ffmpeg Pillow numpy requests PyYAML proglog decorator
          python -m pip show moviepy || true

      - name: Verify MoviePy import (fail early if missing)
        run: |
          python - <<'PY'
          import sys
          try:
              import moviepy, imageio_ffmpeg
              print('MoviePy OK:', getattr(moviepy,'__version__','?'))
              print('FFmpeg exe:', imageio_ffmpeg.get_ffmpeg_exe())
          except Exception as e:
              print('FATAL: MoviePy import failed:', e)
              sys.exit(2)
          PY

      - name: Fetch assets (Pexels/Pixabay)
        env:
          PEXELS_API_KEY: ${{ env.PEXELS_API_KEY }}
          PIXABAY_API_KEY: ${{ env.PIXABAY_API_KEY }}
        run: |
          python scripts/fetch_assets.py --per-page 6 || true

      - name: Inventory b-roll (log files)
        id: inv
        shell: bash
        run: |
          set -euo pipefail
          echo "broll root:" && ls -lh content/assets/broll || true
          LATEST=$(ls -1d content/assets/broll/* 2>/dev/null | sort | tail -n 1)
          echo "LATEST=$LATEST"
          COUNT=0
          if [ -n "$LATEST" ]; then
            COUNT=$(find "$LATEST" -maxdepth 1 -name '*.mp4' | wc -l | tr -d ' ')
            echo "mp4 count: $COUNT"
             find "${LATEST}" -maxdepth 1 -type f -name "*.mp4" -print \
            | sed 's#.*/##' | head -n 10
          fi
          echo "count=${COUNT}" >> "$GITHUB_OUTPUT"

      - name: Fallback â€” seed synthetic b-roll if none
        if: ${{ steps.inv.outputs.count == '0' }}
        run: |
          python - <<'PY'
          import pathlib, datetime
          from moviepy.editor import ColorClip
          d = pathlib.Path('content/assets/broll')/datetime.date.today().isoformat()
          d.mkdir(parents=True, exist_ok=True)
          colors = [(30,144,255),(255,180,80),(80,200,160)]
          for i,col in enumerate(colors,1):
              p = d/f"synthetic_{i:02d}.mp4"
              clip = ColorClip(size=(1280,720), color=col, duration=5).set_fps(24)
              clip.write_videofile(str(p), codec='libx264', audio=False, fps=24, preset='ultrafast', threads=1, logger=None)
              clip.close()
          print('seeded:', d)
          PY

      - name: Generate metadata
        run: python scripts/generate_metadata.py

      - name: Generate ambient soundtrack
        run: |
          python scripts/generate_music.py --duration 65 --bpm 84 --key A --mode minor --no-arp --percussion-level 0.25 --bright 0.35 --mp3

      - name: Assemble 1080p montage (with soundtrack + ducking)
        run: |
          python -c "import moviepy,sys; print('MoviePy @ assemble:', getattr(moviepy,'__version__','?'), sys.executable)"
          python scripts/assemble_video.py \
            --logger verbose \
            --scan-limit 16 \
            --max-clips 10 \
            --target-seconds 55 \
            --max-height 1080 \
            --music content/assets/music \
            --music-volume 0.18 \
            --music-fade 2.0 \
            --music-crossfade 1.0 \
            --duck-native-audio --duck-dB 12 --duck-attack 0.2 --duck-release 0.6

      - name: Extract title from metadata
        id: meta_title
        run: |
          TITLE=$(python - <<'PY'
          import json
          with open('content/uploads/metadata_001.json', encoding='utf-8') as f:
              j = json.load(f)
          print(j.get('title_en') or j.get('title') or 'Trade Winds On')
          PY
          )
          echo "title=$TITLE" >> $GITHUB_OUTPUT

      - name: Generate 1280x720 thumbnail
        run: |
          python scripts/generate_thumbnail.py \
            --size 1280x720 \
            --title "${{ steps.meta_title.outputs.title }}" \
            --output content/uploads/thumbnail_001.jpg

      - name: Write client secrets (optional)
        if: ${{ env.GOOGLE_CLIENT_SECRET_JSON != '' }}
        env:
          GOOGLE_CLIENT_SECRET_JSON: ${{ env.GOOGLE_CLIENT_SECRET_JSON }}
        run: |
          mkdir -p config
          printf "%s" "$GOOGLE_CLIENT_SECRET_JSON" > config/client_secret.json

      - name: Write OAuth tokens (optional)
        if: ${{ env.YOUTUBE_TOKENS_JSON != '' }}
        env:
          YOUTUBE_TOKENS_JSON: ${{ env.YOUTUBE_TOKENS_JSON }}
        run: |
          mkdir -p config
          printf "%s" "$YOUTUBE_TOKENS_JSON" > config/tokens.json

      - name: Upload to YouTube (optional)
        if: ${{ env.GOOGLE_CLIENT_SECRET_JSON != '' && env.YOUTUBE_TOKENS_JSON != '' }}
        run: |
          python scripts/upload_youtube.py \
            --video content/uploads/scenic_montage_001.mp4 \
            --thumbnail content/uploads/thumbnail_001.jpg \
            --metadata content/uploads/metadata_001.json \
            --privacy unlisted

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kitesurf-outputs-${{ github.run_id }}
          path: |
            content/uploads/scenic_montage_001.mp4
            content/uploads/thumbnail_001.jpg
            content/uploads/metadata_001.json
